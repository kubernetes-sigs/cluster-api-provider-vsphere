---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.0
  name: vspheremachines.vmware.infrastructure.cluster.x-k8s.io
spec:
  group: vmware.infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: VSphereMachine
    listKind: VSphereMachineList
    plural: vspheremachines
    singular: vspheremachine
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Zone
      jsonPath: .spec.failureDomain
      name: Zone
      type: string
    - description: Provider ID
      jsonPath: .spec.providerID
      name: ProviderID
      type: string
    - description: IP address
      jsonPath: .status.vmIp
      name: IPAddr
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: VSphereMachine is the Schema for the vspheremachines API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: VSphereMachineSpec defines the desired state of VSphereMachine.
            properties:
              className:
                description: |-
                  ClassName is the name of the class used when specifying the underlying
                  virtual machine
                type: string
              failureDomain:
                description: |-
                  FailureDomain is the failure domain the machine will be created in.
                  Must match a key in the FailureDomains map stored on the cluster object.
                type: string
              imageName:
                description: |-
                  ImageName is the name of the base image used when specifying the
                  underlying virtual machine
                type: string
              minHardwareVersion:
                description: |-
                  MinHardwareVersion specifies the desired minimum hardware version
                  for this VM. Setting this field will ensure that the hardware version
                  of the VM is at least set to the specified value.
                  The expected format of the field is vmx-15.
                type: string
              namingStrategy:
                description: NamingStrategy allows configuring the naming strategy
                  used when calculating the name of the VirtualMachine.
                properties:
                  template:
                    description: |-
                      Template defines the template to use for generating the name of the VirtualMachine object.
                      If not defined, it will fall back to `{{ .machine.name }}`.
                      The templating has the following data available:
                      * `.machine.name`: The name of the Machine object.
                      The templating also has the following funcs available:
                      * `trimSuffix`: same as strings.TrimSuffix
                      * `trunc`: truncates a string, e.g. `trunc 2 "hello"` or `trunc -2 "hello"`
                      Notes:
                      * While the template offers some flexibility, we would like the name to link to the Machine name
                        to ensure better user experience when troubleshooting
                      * Generated names must be valid Kubernetes names as they are used to create a VirtualMachine object
                        and usually also as the name of the Node object.
                      * Names are automatically truncated at 63 characters. Please note that this can lead to name conflicts,
                        so we highly recommend to use a template which leads to a name shorter than 63 characters.
                    type: string
                type: object
              powerOffMode:
                default: hard
                description: |-
                  PowerOffMode describes the desired behavior when powering off a VM.

                  There are three, supported power off modes: hard, soft, and
                  trySoft. The first mode, hard, is the equivalent of a physical
                  system's power cord being ripped from the wall. The soft mode
                  requires the VM's guest to have VM Tools installed and attempts to
                  gracefully shut down the VM. Its variant, trySoft, first attempts
                  a graceful shutdown, and if that fails or the VM is not in a powered off
                  state after reaching 5 minutes timeout, the VM is halted.

                  If omitted, the mode defaults to hard.
                enum:
                - hard
                - soft
                - trySoft
                type: string
              providerID:
                description: |-
                  ProviderID is the virtual machine's BIOS UUID formatted as
                  vsphere://12345678-1234-1234-1234-123456789abc.
                  This is required at runtime by CAPI. Do not remove this field.
                type: string
              storageClass:
                description: |-
                  StorageClass is the name of the storage class used when specifying the
                  underlying virtual machine.
                type: string
              volumes:
                description: Volumes is the set of PVCs to be created and attached
                  to the VSphereMachine
                items:
                  description: VSphereMachineVolume defines a PVC attachment.
                  properties:
                    capacity:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: Capacity is the PVC capacity
                      type: object
                    name:
                      description: 'Name is suffix used to name this PVC as: VSphereMachine.Name
                        + "-" + Name'
                      type: string
                    storageClass:
                      description: StorageClass defaults to VSphereMachineSpec.StorageClass
                      type: string
                  required:
                  - capacity
                  - name
                  type: object
                type: array
            required:
            - className
            - imageName
            type: object
          status:
            description: VSphereMachineStatus defines the observed state of VSphereMachine.
            properties:
              addresses:
                description: Addresses contains the instance associated addresses.
                items:
                  description: NodeAddress contains information for the node's address.
                  properties:
                    address:
                      description: The node address.
                      type: string
                    type:
                      description: Node address type, one of Hostname, ExternalIP
                        or InternalIP.
                      type: string
                  required:
                  - address
                  - type
                  type: object
                type: array
              conditions:
                description: Conditions defines current service state of the VSphereMachine.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed. If that is not known, then using the time when
                        the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This field may be empty.
                      type: string
                    reason:
                      description: |-
                        reason is the reason for the condition's last transition in CamelCase.
                        The specific API may choose whether or not this field is considered a guaranteed API.
                        This field may be empty.
                      type: string
                    severity:
                      description: |-
                        severity provides an explicit classification of Reason code, so the users or machines can immediately
                        understand the current situation and act accordingly.
                        The Severity field MUST be set only when Status=False.
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
                        can be useful (see .node.status.conditions), the ability to deconflict is important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: |-
                  FailureMessage will be set in the event that there is a terminal problem
                  reconciling the Machine and will contain a more verbose string suitable
                  for logging and human consumption.

                  This field should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over
                  time (like service outages), but instead indicate that something is
                  fundamentally wrong with the Machine's spec or the configuration of
                  the controller, and that manual intervention is required. Examples
                  of terminal errors would be invalid combinations of settings in the
                  spec, values that are unsupported by the controller, or the
                  responsible controller itself being critically misconfigured.

                  Any transient errors that occur during the reconciliation of Machines
                  can be added as events to the Machine object and/or logged in the
                  controller's output.
                type: string
              failureReason:
                description: |-
                  FailureReason will be set in the event that there is a terminal problem
                  reconciling the Machine and will contain a succinct value suitable
                  for machine interpretation.

                  This field should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over
                  time (like service outages), but instead indicate that something is
                  fundamentally wrong with the Machine's spec or the configuration of
                  the controller, and that manual intervention is required. Examples
                  of terminal errors would be invalid combinations of settings in the
                  spec, values that are unsupported by the controller, or the
                  responsible controller itself being critically misconfigured.

                  Any transient errors that occur during the reconciliation of Machines
                  can be added as events to the Machine object and/or logged in the
                  controller's output.
                type: string
              ready:
                description: |-
                  Ready is true when the provider resource is ready.
                  This is required at runtime by CAPI. Do not remove this field.
                type: boolean
              vmID:
                description: ID is used to identify the virtual machine.
                type: string
              vmIp:
                description: IPAddr is the IP address used to access the virtual machine.
                type: string
              vmstatus:
                description: VMStatus is used to identify the virtual machine status.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
