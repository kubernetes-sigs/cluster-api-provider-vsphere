<!--
***** Copyright 2008 VMware, Inc.  All rights reserved. - VMware Confidential
***** Ant wrapper script on 'gobuild deps' command to download gobuild
***** components in dev environment.
***** Please visit https://wiki.eng.vmware.com/GoBuild/Components
***** for detail information on gobuild components system.
*****
***** Input flags:
*****    GOBUILD_TARGET: Project target name in gobuild.
*****    OBJDIR: Project build type.
*****
***** Optional Input flags:
*****    GOBUILD_AUTO_COMPONENTS: Dis/enable compcache auto-download. (Default: true)
*****       Unset it or set it with empty to disable gobuild compcache auto-download.
*****    MAINSRCROOT: Project source root (Default: directory contains support/gobuild)
*****    BUILDROOT: Project build root (Default: ${MAINSRCROOT}/build)
*****    GOBUILD_AUTO_COMPONENTS_SKIP: Equivalent to skip.components flag to
*****       gobuild deps command.
*****    GOBUILD_AUTO_COMPONENTS_HOSTTYPE: Equivalent to hosttype flag to gobuild
*****       deps command.
*****    GOBUILD_AUTO_COMPONENTS_REQUEST: Equivalent to request flag to gobuild deps
*****       command.
*****    GOBUILD_AUTO_COMPONENTS_BACKEND: Equivalent to compcache.server flag to
*****       gobuild deps.
*****    GOBUILD_AUTO_COMPONENTS_SERVER: Equivalent to compcache.backend flag to
*****       gobuild deps.
*****
***** Output:
*****    Properties file contains GOBUILD_<COMP>_ROOT key and path to
*****    downloaded component directory.
*****
***** Sample usage:
*****    <import file="${MAINSRCROOT}/support/gobuild/ant/auto-components.xml" />
*****    <target name="gobuild-compcache">
*****       <antcall target="download-components">
*****          <param name="GOBUILD_TARGET" value="${GOBUILD_TARGET}"/>
*****       </antcall>
*****    </target>
*****    <property file="${BUILDROOT}/${OBJDIR}/gobuild/specinfo/specinfo.properties"/>
*****
***** It downloads ciq project gobuild component cache and creates a
***** properties file: dist/beta/gobuild/specinfo/specinfo.properties
*****
***** Sample content of the properties file
*****    # WARNING: This file is auto-generated by create-specinfo.py. Do not edit!
*****    GOBUILD_VLICENSE_ROOT=/drive2/p4clients/plo-cm-main/CM/dist/gobuild/compcache/vlicense/ob-161298/linux
*****
-->

<project name="gobuild-components" default="download-components">

   <property name="project.root" location="../../.."/>
   <property name="GOBUILD_AUTO_COMPONENTS" value="true"/>
   <property environment="env"/>
   <condition property="TCROOT" value="${env.TCROOT}" else="/build/toolchain">
      <os family="windows"/>
   </condition>

   <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
         <pathelement location="${TCROOT}/noarch/ant-contrib-1.0b3/ant-contrib-1.0b3.jar" />
      </classpath>
   </taskdef>

   <!-- check toolchain existence -->
   <target name="check-toolchain">
      <fail message="Toolchain path ${TCROOT} is not accessible. Please see https://wiki.eng.vmware.com/Build/Toolchain/Access for information on how to set up toolchain.">
         <condition>
            <not><available type="dir" file="${TCROOT}"/></not>
         </condition>
      </fail>
   </target>

   <!-- tools alias -->
   <target name="set-tools" depends="check-toolchain">
      <if>
         <os family="windows"/>
         <then>
            <condition property="BUILDAPPS" value="${env.BUILDAPPS}" else="//build-apps/apps/bin">
               <isset property="env.BUILDAPPS"/>
            </condition>
            <property name="GOBUILD_CMD" value="${BUILDAPPS}/gobuild.cmd" />
            <property name="GOBUILD_PYTHON" value="${TCROOT}/win32/python-2.6.1/python.exe" />
         </then>
         <elseif>
            <os family="mac"/>
            <then>
               <condition property="BUILDAPPS" value="${env.BUILDAPPS}" else="/build/apps/bin">
                  <isset property="env.BUILDAPPS"/>
               </condition>
               <property name="GOBUILD_CMD" value="${BUILDAPPS}/gobuild" />
               <property name="GOBUILD_PYTHON" value="${TCROOT}/mac32/python-2.6.1/bin/python" />
            </then>
         </elseif>
         <elseif>
            <os family="unix"/>
            <then>
               <condition property="BUILDAPPS" value="${env.BUILDAPPS}" else="/build/apps/bin">
                  <isset property="env.BUILDAPPS"/>
               </condition>
               <property name="GOBUILD_CMD" value="${BUILDAPPS}/gobuild" />
               <property name="GOBUILD_PYTHON" value="${TCROOT}/lin32/python-2.6.1/bin/python" />
            </then>
         </elseif>
         <else>
            <fail message="unsupported OS."/>
         </else>
      </if>

      <!-- Check build-apps existence -->
      <fail message="BUILDAPPS path ${BUILDAPPS} is not accessible. Please see https://wiki.eng.vmware.com/Build/Storage/Access for information on how to set up /build/apps.">
         <condition>
            <not><available type="dir" file="${BUILDAPPS}"/></not>
         </condition>
      </fail>
   </target>

   <!-- Check for required values -->
   <target name="check-gobuild-target" unless="GOBUILD_TARGET">
      <fail message="Gobuild target (GOBUILD_TARGET) is required."/>
   </target>
   <target name="check-build-type" unless="OBJDIR">
      <fail message="Build type (OBJDIR) is required."/>
   </target>

   <!-- Set default srcroot and buildroot values -->
   <target name="set-src-root" unless="MAINSRCROOT">
      <property name="MAINSRCROOT" value="${project.root}"/>
   </target>
   <target name="set-build-root" unless="BUILDROOT">
      <property name="BUILDROOT" value="${project.root}/build"/>
   </target>

   <!-- This gobuild components auto-download is for dev env build only.
        OB/SB/CB downloads components cache and pass in GOBUILD_AUTO_COMPONENTS='false'
        Unset this property to skip runing download again. -->
   <target name="check-GOBUILD_AUTO_COMPONENTS">
      <if>
         <equals arg1="${GOBUILD_AUTO_COMPONENTS}" arg2="false"/>
         <then>
            <var name="GOBUILD_AUTO_COMPONENTS" unset="true"/>
         </then>
      </if>
    </target>

   <target name="init" depends="check-toolchain, check-build-type,check-GOBUILD_AUTO_COMPONENTS,set-src-root,set-build-root">
      <property name="create.specinfo" value="${MAINSRCROOT}/support/gobuild/scripts/create-specinfo.py"/>
      <property name="gobuild.log.dir" location="${BUILDROOT}/${OBJDIR}/gobuild/log"/>
      <property name="gobuild.spec.dir" location="${BUILDROOT}/${OBJDIR}/gobuild/specinfo"/>
      <if>
         <isset property="env.GOBUILD_LOCALCACHE_DIR"/>
         <then>
            <property name="local.cache" location="${env.GOBUILD_LOCALCACHE_DIR}"/>
         </then>
         <else>
            <property name="local.cache" location="${BUILDROOT}/gobuild/compcache"/>
         </else>
      </if>
      <property name="specinfo.raw" value="${gobuild.spec.dir}/specinfo.raw"/>
      <property name="specinfo.raw.new" value="${specinfo.raw}.new"/>
      <property name="specinfo.properties" value="${gobuild.spec.dir}/specinfo.properties"/>
      <property name="specinfo.properties.new" value="${specinfo.properties}.new"/>
   </target>

   <target name="download-components" if="GOBUILD_AUTO_COMPONENTS"
      depends="set-tools,check-gobuild-target,init">
      <!-- Set gobuild deps command optional flags. -->
      <condition property="skip.flag" value="--skip.components=${GOBUILD_AUTO_COMPONENTS_SKIP}" else=" ">
         <isset property="GOBUILD_AUTO_COMPONENTS_SKIP" />
      </condition>
      <condition property="hosttype.flag" value="--hosttype=${GOBUILD_AUTO_COMPONENTS_HOSTTYPE}" else=" ">
         <isset property="GOBUILD_AUTO_COMPONENTS_HOSTTYPE" />
      </condition>
      <condition property="request.flag" value="--request" else=" ">
         <or>
            <isset property="GOBUILD_AUTO_COMPONENTS_REQUEST" />
            <isset property="GOBUILD_AUTO_COMPONENTS_WAIT" />
         </or>
      </condition>
      <condition property="wait.flag" value="--wait" else=" ">
         <isset property="GOBUILD_AUTO_COMPONENTS_WAIT" />
      </condition>
      <condition property="backend.flag" value="--backend=${GOBUILD_AUTO_COMPONENTS_BACKEND}" else=" ">
         <isset property="GOBUILD_AUTO_COMPONENTS_BACKEND" />
      </condition>
      <condition property="server.flag" value="--server=${GOBUILD_AUTO_COMPONENTS_SERVER}" else=" ">
         <isset property="GOBUILD_AUTO_COMPONENTS_SERVER" />
      </condition>
      <!-- Set download flag by default. To unset, pass in '-Ddownload.flag=' -->
      <property name="download.flag" value="--download" />

      <var name="gobuild.dep.flags" value="deps ${GOBUILD_TARGET}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} --srcroot=${MAINSRCROOT}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} --buildtype=${OBJDIR}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} --localcache=${local.cache}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} --logdir=${gobuild.log.dir}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} ${download.flag}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} ${skip.flag}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} ${hosttype.flag}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} ${request.flag}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} ${wait.flag}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} ${backend.flag}"/>
      <var name="gobuild.dep.flags" value="${gobuild.dep.flags} ${server.flag}"/>

      <!-- Execute gobuild deps command -->
      <mkdir dir="${gobuild.spec.dir}"/>
      <exec executable="${GOBUILD_CMD}" output="${specinfo.raw.new}" logError="true" failonerror="true">
         <arg line="${gobuild.dep.flags}"/>
      </exec>

      <!-- Store GOBUILD_<COMP>_ROOT key and value in specinfo.properties file -->
      <move file="${specinfo.raw.new}" tofile="${specinfo.raw}" overwrite="true"/>

      <exec executable="${GOBUILD_PYTHON}">
         <arg value="${create.specinfo}"/>
         <arg value="--format=ant"/>
         <redirector output="${specinfo.properties.new}"
                     logError="true"
                     input="${specinfo.raw}">
         </redirector>
      </exec>
      <move file="${specinfo.properties.new}" tofile="${specinfo.properties}" overwrite="true"/>
   </target>

   <!-- Clean up gobuild localcache and spec directories -->
   <target name="clean" depends="init">
      <delete dir="${BUILDROOT}/${OBJDIR}/gobuild" />
      <delete dir="${BUILDROOT}/gobuild" />
   </target>
</project>
