// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/iam/credentials/v1/iamcredentials.proto

package credentials // import "google.golang.org/genproto/googleapis/iam/credentials/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IAMCredentialsClient is the client API for IAMCredentials service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IAMCredentialsClient interface {
	// Generates an OAuth 2.0 access token for a service account.
	GenerateAccessToken(ctx context.Context, in *GenerateAccessTokenRequest, opts ...grpc.CallOption) (*GenerateAccessTokenResponse, error)
	// Generates an OpenID Connect ID token for a service account.
	GenerateIdToken(ctx context.Context, in *GenerateIdTokenRequest, opts ...grpc.CallOption) (*GenerateIdTokenResponse, error)
	// Signs a blob using a service account's system-managed private key.
	SignBlob(ctx context.Context, in *SignBlobRequest, opts ...grpc.CallOption) (*SignBlobResponse, error)
	// Signs a JWT using a service account's system-managed private key.
	SignJwt(ctx context.Context, in *SignJwtRequest, opts ...grpc.CallOption) (*SignJwtResponse, error)
}

type iAMCredentialsClient struct {
	cc *grpc.ClientConn
}

func NewIAMCredentialsClient(cc *grpc.ClientConn) IAMCredentialsClient {
	return &iAMCredentialsClient{cc}
}

func (c *iAMCredentialsClient) GenerateAccessToken(ctx context.Context, in *GenerateAccessTokenRequest, opts ...grpc.CallOption) (*GenerateAccessTokenResponse, error) {
	out := new(GenerateAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/google.iam.credentials.v1.IAMCredentials/GenerateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMCredentialsClient) GenerateIdToken(ctx context.Context, in *GenerateIdTokenRequest, opts ...grpc.CallOption) (*GenerateIdTokenResponse, error) {
	out := new(GenerateIdTokenResponse)
	err := c.cc.Invoke(ctx, "/google.iam.credentials.v1.IAMCredentials/GenerateIdToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMCredentialsClient) SignBlob(ctx context.Context, in *SignBlobRequest, opts ...grpc.CallOption) (*SignBlobResponse, error) {
	out := new(SignBlobResponse)
	err := c.cc.Invoke(ctx, "/google.iam.credentials.v1.IAMCredentials/SignBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMCredentialsClient) SignJwt(ctx context.Context, in *SignJwtRequest, opts ...grpc.CallOption) (*SignJwtResponse, error) {
	out := new(SignJwtResponse)
	err := c.cc.Invoke(ctx, "/google.iam.credentials.v1.IAMCredentials/SignJwt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMCredentialsServer is the server API for IAMCredentials service.
type IAMCredentialsServer interface {
	// Generates an OAuth 2.0 access token for a service account.
	GenerateAccessToken(context.Context, *GenerateAccessTokenRequest) (*GenerateAccessTokenResponse, error)
	// Generates an OpenID Connect ID token for a service account.
	GenerateIdToken(context.Context, *GenerateIdTokenRequest) (*GenerateIdTokenResponse, error)
	// Signs a blob using a service account's system-managed private key.
	SignBlob(context.Context, *SignBlobRequest) (*SignBlobResponse, error)
	// Signs a JWT using a service account's system-managed private key.
	SignJwt(context.Context, *SignJwtRequest) (*SignJwtResponse, error)
}

func RegisterIAMCredentialsServer(s *grpc.Server, srv IAMCredentialsServer) {
	s.RegisterService(&_IAMCredentials_serviceDesc, srv)
}

func _IAMCredentials_GenerateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMCredentialsServer).GenerateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.iam.credentials.v1.IAMCredentials/GenerateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMCredentialsServer).GenerateAccessToken(ctx, req.(*GenerateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMCredentials_GenerateIdToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateIdTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMCredentialsServer).GenerateIdToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.iam.credentials.v1.IAMCredentials/GenerateIdToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMCredentialsServer).GenerateIdToken(ctx, req.(*GenerateIdTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMCredentials_SignBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMCredentialsServer).SignBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.iam.credentials.v1.IAMCredentials/SignBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMCredentialsServer).SignBlob(ctx, req.(*SignBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMCredentials_SignJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMCredentialsServer).SignJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.iam.credentials.v1.IAMCredentials/SignJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMCredentialsServer).SignJwt(ctx, req.(*SignJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAMCredentials_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.iam.credentials.v1.IAMCredentials",
	HandlerType: (*IAMCredentialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAccessToken",
			Handler:    _IAMCredentials_GenerateAccessToken_Handler,
		},
		{
			MethodName: "GenerateIdToken",
			Handler:    _IAMCredentials_GenerateIdToken_Handler,
		},
		{
			MethodName: "SignBlob",
			Handler:    _IAMCredentials_SignBlob_Handler,
		},
		{
			MethodName: "SignJwt",
			Handler:    _IAMCredentials_SignJwt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/iam/credentials/v1/iamcredentials.proto",
}

func init() {
	proto.RegisterFile("google/iam/credentials/v1/iamcredentials.proto", fileDescriptor_iamcredentials_bb9e3c7fcb39de21)
}

var fileDescriptor_iamcredentials_bb9e3c7fcb39de21 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x65, 0x24, 0x7e, 0x94, 0x01, 0xa4, 0x30, 0x51, 0x31, 0x65, 0x40, 0x22, 0x48, 0x31,
	0x2d, 0x14, 0xa4, 0x14, 0x24, 0x5a, 0x10, 0xa8, 0x95, 0x58, 0x80, 0x89, 0xcd, 0x4d, 0xaf, 0x2c,
	0x43, 0xe2, 0x1b, 0x62, 0xb7, 0x1d, 0x10, 0x0b, 0xaf, 0xc0, 0xca, 0xc0, 0x83, 0xf0, 0x08, 0x6c,
	0xbc, 0x00, 0x03, 0x0f, 0xc1, 0x88, 0x92, 0x38, 0xa2, 0x12, 0x2d, 0x24, 0xa3, 0xaf, 0xcf, 0x39,
	0xf7, 0x3b, 0xc3, 0xb5, 0x3c, 0x8e, 0xc8, 0x43, 0xa0, 0x82, 0x45, 0x34, 0x48, 0x60, 0x00, 0x52,
	0x0b, 0x16, 0x2a, 0x3a, 0xaa, 0xa7, 0xa3, 0x89, 0x89, 0x17, 0x27, 0xa8, 0xd1, 0x5e, 0xcb, 0xf5,
	0x9e, 0x60, 0x91, 0x37, 0xf9, 0x3b, 0xaa, 0xd7, 0xd6, 0x4d, 0x14, 0x8b, 0x05, 0x65, 0x52, 0xa2,
	0x66, 0x5a, 0xa0, 0x34, 0xc6, 0xda, 0xc6, 0xec, 0x45, 0x01, 0x46, 0x11, 0xca, 0x5c, 0xd7, 0xf8,
	0x98, 0xb7, 0x96, 0xbb, 0xed, 0xf3, 0xe3, 0x1f, 0x89, 0xfd, 0x46, 0xac, 0xd5, 0x33, 0x90, 0x90,
	0x30, 0x0d, 0xed, 0x20, 0x00, 0xa5, 0xae, 0xf0, 0x16, 0xa4, 0xdd, 0xf4, 0x66, 0xc2, 0x78, 0x53,
	0xf4, 0x17, 0x70, 0x37, 0x04, 0xa5, 0x6b, 0x7b, 0x55, 0x6d, 0x2a, 0x46, 0xa9, 0xc0, 0x39, 0x7d,
	0x7c, 0xff, 0x7c, 0x9a, 0x3b, 0x72, 0x5a, 0x29, 0xf3, 0xbd, 0x64, 0x11, 0x1c, 0xc6, 0x09, 0xde,
	0x40, 0xa0, 0x15, 0x75, 0xa9, 0x82, 0x64, 0x24, 0x82, 0xd4, 0x88, 0x43, 0x99, 0x4e, 0x1e, 0x7c,
	0xfe, 0x3b, 0xcc, 0x27, 0xae, 0xfd, 0x4a, 0xac, 0x95, 0x62, 0x4f, 0x77, 0x90, 0x57, 0xa9, 0x97,
	0x60, 0x32, 0xda, 0xa2, 0x46, 0xa3, 0x8a, 0xc5, 0x54, 0xe8, 0x64, 0x15, 0x0e, 0x9c, 0xfd, 0xaa,
	0x15, 0x4c, 0x50, 0x8a, 0xff, 0x42, 0xac, 0xa5, 0x4b, 0xc1, 0x65, 0x27, 0xc4, 0xbe, 0xed, 0xfe,
	0x01, 0x51, 0x88, 0x0a, 0xe0, 0xad, 0x52, 0x5a, 0x43, 0xda, 0xca, 0x48, 0x9b, 0xce, 0x76, 0x59,
	0x52, 0x65, 0x12, 0x52, 0xc4, 0x67, 0x62, 0x2d, 0xa6, 0x89, 0xbd, 0xb1, 0xb6, 0x37, 0xff, 0xd9,
	0xda, 0x1b, 0xeb, 0x02, 0xd0, 0x2d, 0x23, 0x35, 0x7c, 0x7e, 0xc6, 0xb7, 0xeb, 0xd0, 0x2a, 0x7c,
	0xbd, 0xb1, 0xf6, 0x89, 0xdb, 0xe9, 0x5e, 0x9f, 0x98, 0x45, 0x1c, 0x43, 0x26, 0xb9, 0x87, 0x09,
	0xa7, 0x1c, 0x64, 0x76, 0x00, 0x34, 0xff, 0x62, 0xb1, 0x50, 0x53, 0x6e, 0xa5, 0x35, 0xf1, 0xfc,
	0x22, 0xa4, 0xbf, 0x90, 0x79, 0x76, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xb5, 0x16, 0x19,
	0xc7, 0x03, 0x00, 0x00,
}
